#!/bin/bash

source "$(dirname "$0")/config"

############################################################
# Header

print_header="$lib/mkheader/long_header"
>&2 $print_header -d "$xdir"

############################################################
# Checking whether environment file exists

gitdir="$(cd "$xdir" ; find_git 2> /dev/null )"

if [ -z "$gitdir" ] ; then
	>&2 warning << EOF
You are not inside a git repository. We will create environment \
file in the path of install executable.
EOF
	environment_file="$xdir/.env"
else
	environment_file="$gitdir/.env"
fi

# If file exists and has not zero size
if [ -s "$environment_file" ] ; then
	fatalerr "It seems like the environment file was already configured. If you would like to start from a fresh installation, please run ./uninstall first."
fi

############################################################
# Checking for dependencies

>&2 echo "Checking for dependencies..."

dependencies=("node" "psql")
for arg in ${dependencies[@]} ; do
	if [ -z $(which "$arg") ] ; then
		>&2 echo -e "${error} You have unmet dependencies. Please install $arg before proceding with database installation."
		exit 1
	fi
	>&2 echo -e "$arg ... ${check}"
done

>&2 echo -e "\n${success} All dependencies were met successfully"

############################################################
# Checking and reading arguments

if [ $# -ne 1 ] ; then
	read -rp "What is the name of the database to be created? " database
	if [ -z "$database" ] ; then
		>&2 echo -e "${error} Database  name cannot be left empty!"
		exit 1
	fi
else
	database="$1"
fi

############################################################
# Configuring PSQL

uname="${database}_admin"
passwd="$(pwgen -s 10 1)"
host="127.0.0.1"
port=5432

>&2 print_eof << EOF

To run this script, ${yellow}you will need to log in as a super user${no_color} in PostgreSQL server. \
Usually, this corresponds to Unix ''postgres'' account. \
If you are in the sudoers group, it will suffice to type in your account password below.
EOF

sudo -i -u postgres bash << EOF || exit 1
psql -c "CREATE USER $uname WITH ENCRYPTED PASSWORD '$passwd'; " \
-c "CREATE DATABASE $database; " \
-c "GRANT ALL PRIVILEGES ON DATABASE $database TO $uname; " >&2
EOF

>&2 echo -e "\nStarting database...\n"

>&2 printf "${success} "

cat << EOF
You can now log in to psql with the command:

    psql -h $host -p $port -d $database -U $uname

Then type in the password: ''$passwd''.
EOF

############################################################
# Pasting to environment file

# First we must be sure that, if we are working in a Git repository,
# the new file will not be uploaded to Git

# Not necessarily .git will be a directory. In case we are working
# in a submodule, it could be a file (pointing to the parent module)

if [ -z "$gitdir" ] ; then
	warning << EOF

You don't seem to be working within a Git repository. If you \
intend to upload this directory to Git later, be sure to add \
and configure .gitignore file properly, or the credentials to \
your database will be exposed online!

EOF
else
	gitignore="$gitdir/.gitignore"
	echo -e "You seem to be working within a Git repository"
	if [ ! -f "$gitignore" \
		-o -z "$(grep -E "^.env$" "$gitignore")" ] ; then

		warning << EOF
You have no .gitignore file, or you have one, but it is not \
set to ignore .env file. Adding this setting...
EOF
		echo ".env" >> "$gitignore"
	
		warning "Unstaging .env file as a precaution"
		git rm --cached "$environment_file" > /dev/null 2>&1
		>&2 echo -e "${success}"
	fi	
fi

touch "$environment_file"

set_env="$lib/bash_common/set_env $environment_file"
$set_env "POSTGRES_USER" "$uname"
$set_env "POSTGRES_PASSWORD" "$passwd"
$set_env "POSTGRES_HOST" "$host"
$set_env "POSTGRES_DATABASE" "$database"
$set_env "POSTGRES_PORT" "$port"

cat << EOF
New credentials were saved to file \
''$(realpath "$environment_file")'', \
the file on project root holding environment variables.
EOF

############################################################
# Populating createad database

>&2 echo -e "\nWe will now populate the created database $db"

for sql_file in "$xdir/sql/"*.sql ; do
    >&2 echo -e "Reading file $sql_file ... ${ok}"
    >&2 PGPASSWORD="$passwd" psql -U "$uname" -h "$host" -d "$database" \
        -p "$port" -f "$sql_file"
done

>&2 echo -e "${done}"
